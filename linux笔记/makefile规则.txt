介绍:
	Makefile是一种管理和编译 Linux C/C++ 项目的工具.它确定了工程中,编译文件的顺序.并且做到一个make命令,"自动编译"整个工程的作用

	make命令执行时，需要一个 makefile 文件，以告诉make命令如何去编译和链接程序。

	不同产商的make各不相同，也有不同的语法，但其本质都是在“文件依赖性”上

程序编译的过程:(大多数编程语言)
	原文件(.c/.java)--->中间代码文件(.o/.class)---->执行文件
规则:
	每个"规则"都是由"目标"、"依赖"、"命令"构成
	例:
	target ...?: prerequisites ...
			command ...
	target:可以是一个object file(目标文件)，也可以是一个执行文件，还可以是一个标签（label）。
	prerequisites:target所需要的依赖文件或是目标。
	command:make需要执行的命令。（任意的shell命令)
简单理解:
	目标文件 比 依赖文件 (旧,或是根本不存在) 那么执行
		 command命令,并继续向下查找依赖文件执行,否则就截止(有点像堆栈)(往往文件最后会有 clean: 这样的功能性命令,要单独执行它,直接 make clean,指定从clean处执行)

make是如何工作的:
	1/make会在当前目录下找名字叫“Makefile”或“makefile”的文件。
	2/找到，它会找文件中的第一个目标文件（target），并把这个文件作为最终的目标文件。 
	3/如果最终文件不存在，或是最终所依赖的后面的 .o 文件的文件修改时间要比最终文件新，也会执行后面所定义的命令来生成最终文件。
	4/如果最终文件所依赖的.o文件也不存在，那么make会在当前makefile文件中找目标为.o文件的依赖性，如果找到则再根据那一个规则生成.o文件。（这有点像一个堆栈的过程）
	5/如果所有的C文件和H文件是存在的，于是make会生成 .o 文件，然后再用 .o 文件生成make生成最终执行文件

可以使用include<文件名>来引用其他mk文件

变量声明,可以使用,$(),${},$$,一个意思.$()中可以是全局变量,也可以是命令,如: cur-dir := $(shell pwd)

:= , = ,+=的区别:
:=	重新复制,不影响该符号前的变量引用
=	全局赋值,影响全部引用
