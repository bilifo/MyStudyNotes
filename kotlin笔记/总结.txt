由于谷歌和甲骨文关于java的扯皮,导致安卓不得不开始寻求放弃java.
kotlin就是这个替代品.以后用kotlin的人将逐渐替代java.
kotlin作为一种偏脚本的高级语言,优点是java这种上世纪老语言无法比拟的.它避免了繁杂的set/get和一些java广为诟病的繁复代码.
当然,kotlin也是把代码编成class文件,对应jvm,运行的东西都是一样的,只是写代码的人轻松了,但对应读的人,见仁见智把吧.

kotlin是函数式编程,和java面向对象编程的区别:
	http://www.vaikan.com/whats-wrong-with-oop-and-fp/

函数式编程是什么:
	它不会依赖也不会改变当前函数以外的数据。函数是最小单位,它可以作为参数和结果传入传出

	如:function cal(a,b,fun){	return fun(a,b);}
	//具体算法1，加法
	var add = function(a,b){	return a+b;	}
	//具体算法2，减法
	var reduce = function(a,b){	return a-b;	}
	那么我用的时候就可以酱紫：
	var result1 = cal(a,b ,add); //a+b
	var result2 = cal(a,b ,reduce);//a-b
	var result3 = cal(cal(a,b,add),c,reduce)//a+b-c
疑问:

	函数式编程，和面向对象的方法带返回值，有什么不一样的？我看网上说，函数式编程可以将函数方法作为参数传入另一个函数，但我面相对象中，带return的方法，也可以作为参数传入另一个方法啊，这有什么区别吗？
解答:
https://new.qq.com/omn/20181007/20181007A15A49.html

面向对象编程的缺点:

	1/由于为了重用而定义的类,在多线程时,会被反复赋入不同数据,导致数据的不确定性
	2/为了高度抽象和可重用性,导致了大量无用代码(抽象了,接口)
	3/封装对象的时候有性能瓶颈

函数式编程的缺点:

	1/比面向对象更慢的性能瓶颈.某些其他语言较易实现的方法,在这会较难实现.

官方参考网站:
	https://www.kotlincn.net/docs/reference/comparison-to-java.html

特别注意:

	1/只要是方法,就要加fun
	2/可以被继承的方法\变量\类,要加open.接口除外
	3/子类重写或实现父类的方法\变量,要加override
	4/实现接口,需实现接口中所有的方法和变量,无论方法是否以有默认实现.
	5/如果子类有主构造方法,在继承时"class 子类:父类"就行了.如果子类没有主构造方法,在继承时要写成"class 子类:父类构造方法"

kotlin的优势:

	简洁: 大大减少样板代码的数量。
	安全: 避免空指针异常等整个类的错误。
	互操作性: 充分利用 JVM、Android 和浏览器的现有库。
	工具友好: 可用任何 Java IDE 或者使用命令行构建。

Android studio的kotlin插件安装:

	"file"---"settings"---"plugins"---搜索kotlin---选择安装"Kotlin"

Android studio中java代码和kotlin的转换:

	java-->kotlin:"Code"---"Convert java file to kotlin file"
	kotlin-->java:"Tool"---"Kotlin"---"Show Kotlin Bytecode"---"Decompile"

Android studio中java代码和kotlin的相互调用:
	java调kotlin:
	kotlin调java:

注释:和基本标准一致

继承和接口:

	class Student : Person() {...}
	子类继承父类时，不能有跟父类同名的变量，除非父类中该变量为 private，或者父类中该变量为 open 并且子类用 override 关键字重写

函数:

	关键字"fun"表示这是个函数(或方法).Unit表示返回无意义值,相当与null
		如:public fun printSum(a: Int, b: Int): Int {
    			return a+b
		}
		或:public fun printSum(a: Int, b: Int): Int = a+b
可变参数:

	关键字"vararg"表示可变参数

常量和变量:

	关键字"var"表变量.如:mmm:Int=10
	关键字"val"表常量.
	对于变量,可以和其他脚本语言一样,不写明类型

字符串:String

	在字符串中$表示一个变量或函数.要指定输出$符号,用${'$'}
	如:val s2 = "${s1.replace("is", "was")}, but now is $a"
	三个引号 """ 扩起来的字符串，支持字符串换行
	trimMargin() 方法来删除多余的空白(相当于java的trim)

null检查:(这是优于java的地方)

	在变量的类型后加"?"表示可以返回null值
	在变量后加"!!"表示抛出异常

类型检测和自动转换:(类似java的instanceof)?

	关键字"is"表示某个变量或方法是否是某一个类型 如:if(x is String)
	关键字"as"表示将某个变量转换成其他类型 如: var a as String

数据类型:(完全摒弃了基础数据类型,都是对象数据类型)

	Double  64位	123.4或123.4e10
	Float	32位	123.4f
	Long	64位	123L
	Int	32位
	Short	16位
	Byte	8位
	在 Kotlin 中，三个等号 === 表示比较对象地址，两个 == 表示比较两个值大小。

	较小的类型不能隐式转换为较大的类型.但可以通过方法转换.?
	每种数据类型都有下面的这些方法，可以转化为其它的类型：
	toByte(): Byte
	toShort(): Short
	toInt(): Int
	toLong(): Long
	toFloat(): Float
	toDouble(): Double
	toChar(): Char

数据位操作:

	shl(bits) – 左移位 (Java’s <<)
	shr(bits) – 右移位 (Java’s >>)
	ushr(bits) – 无符号右移位 (Java’s >>>)
	and(bits) – 与
	or(bits) – 或
	xor(bits) – 异或
	inv() – 反向

数组:

	用关键字"Array<>",基本和java的数组差不多.
	创建数据用1\arrayOf(1,2,3...)或Array(3,{i->(i++)}),数组长度为3,后面是数据内容
	输出array的内容为字符串
		arrayTest.contentDeepToString()

判断:和java相同.

	但可以把if表达式结果赋值给一个变量(和三元表达式类似的效果,这个功能很强大,避免了retrun)
	如:val max=if(a>b){print("Choose a") a}else{print("Choose b") b}
	when(X)类似java的switch.when中,else同switch的default。
		如:when (x) {
    		0, 1 -> print("x == 0 or x == 1")
    		else -> print("otherwise")
		}

区间:

	区间格式用x..y
	用关键字"in",来检测某个数是否在指定区间内.用"!in"来检测不在区间内
	注:in和is的差别.in检测值,is检测类型.相当于java中in检测object,is检测class的感觉

循环:和java相同

	return：立即把结果返回,并结束函数内所有操作
	break：结束最近的闭合循环
	continue:跳到最近的闭合循环的下一次循环

标签:有点类似java的goto

	标签的声明方式：标签名++"@"，如：abc@
	标签的引用方式："@"++标签名，如：@abc
	break@XXX	从XXX代表的块结束
	continue@XXX	从XXX继续循环
	return@XXX	把结果返回到XXX标记的地方

类和对象:基本和java相同

	类属性修饰符，标示类本身特性。
		abstract    // 抽象类
		final       // 类不可继承，默认属性
		enum        // 枚举类
		open        // 【类可继承，类默认是final的】
		annotation  // 注解类
	访问权限修饰符
		private    // 仅在同一个文件中可见
		protected  // 同一个文件中或子类可见
		public     // 所有调用的地方都可见
		internal   // 同一个模块中可见
	所有类继承自Any(相当于object),默认提供equals(),hashCode(),toString()三个方法

主构造方法:

		跟着在类名后面，constructor(t :T)表示
		主构造器中不能包含任何代码(不能直接在constructor下做声明属性和赋值以外的操作)，初始化代码可以放在初始化代码段中，初始化代码段使用 init 关键字作为前缀(只能在init{}中对属性赋值)。

次构造方法:用this代表主构造函数

		constructor(XXX:T,YYY:T):this(XXX)

如果子类没有主构造函数，则必须在每一个二级构造函数中用super关键字初始化基类,或者在代理另一个构造函数

		constructor(ctx: Context) : super(ctx) {}

属性的赋值.val型只能读,只有get方法

	var 属性名 ：属性的类型 = 初始化的值
             get( ){  return 返回的值   }
             set( 重新赋的值 ){    }
	注意:在基类中，使用fun声明函数时，此函数默认为final修饰，不能被子类重写。如果允许子类重写该函数，那么就要手动添加 open 修饰它, 子类重写方法使用 override 关键词

类的实例化:val xxx = XXX()//不需要new

	关键字"object"代表声明一个单例对象.
		如:object obj : AbstractObj(),IObj
		或 val site =object{ var name: String = "菜鸟教程"
       					var url: String = "www.runoob.}

接口:

	基本和java一样,【但允许接口有方法默认实现】,却无法像抽象类一样,初始化属性值,实现接口时,必须重写属性值.
	接口可以不需要open关键字
	对于多接口有相同方法的实现,在实现时super<A接口>/super<B接口>这样加以区分


拓展:java无的特性(这样避免了装饰类的出现), 支持 扩展函数 和 扩展属性

	拓展函数可以在已有的类中添加新的方法,而不会引起原类的改变.有点像反向的实现味道.
	如:
	class User{
			 var name:String? = null
	}
	fun User.name(name:String){
			 this.name=name
	}
	val c:User= User()
	Logger.e(""+c.name)
	c.name("bbbb")
	Logger.e(""+c.name)

数据类:

	关键字"data"用于创建只包含数据的类,编译器会自动的从主构造函数中根据所有声明的属性提取以下函数：
	equals() / hashCode()
	toString() 格式如 "User(name=John, age=42)"
	componentN() functions 对应于属性，按声明顺序排列
	copy() 函数

	数据类不能为抽象,不能继承于其他类,也不能被其他类继承

	数据类数据的修改:val olderJack = jack.copy(age = 2)

泛型:和java一样

	泛型约束示例:fun <T : Comparable<T>> sort(list: List<T>) {    ……	}

型变:java无的特性

	型变特征有3种:
	1/不变		声明的是什么类型，使用或传递的就要是什么类型
	2/协变		父类出现的地方，可以用子类代替,符合里式替换原则
			类似:java<? extends 父类>  即?应该是父类的子类
			kotlin中在类前加关键字"out"代表"extends"
			只能作为返回结果输出
	3/逆变		子类出现的地方，可以用父类代替
			类似:java<? super 子类>  即?应该是子类的父类或父接口
			kotlin中在类前加关键字"in"代表"extends"
			只能作为参数输入
	数组在

类型投射:

	Array<T>的兼容问题,即Array<String>和Array<Any>不兼容.
	用型变Array<in String>或Array<out Any>来解决.而"in"和"out"可以用"*"符号替换.
	如:interface Function <in T, out U> ----> interface  Function<*, *>

委托:这本是面向对象设计模式的一种,kotlin现在直接支持

	关键字"by"实现委托.
	类的委托即一个类中定义的方法实际是调用另一个类的对象的方法来实现的。

	如:interface Base {	fun print()}// 创建接口
	class BaseImpl(val x: Int) : Base {	override fun print() { print(x) }}// 实现此接口的被委托的类
	class Derived(b: Base) : Base by b	// 通过关键字 by 建立委托类
	fun main(args: Array<String>) {
    		val b = BaseImpl(10)
    		Derived(b).print() // 输出 10
	}
