kaiOS是在安卓源码的基础上,删掉app层,直接改用web网页展示应用,即kaios上所有的界面,其实都是网页.

KaiOS是基于FirefoxOS项目派生出来的,只是一个Firefox OS的端口(虽然官网上说不是,但基于阿三的狡辩本性,我们有理由相信这个观点,而且它们的框架一模一样)
有意思的是,有一个更小的系统,也叫kaiOS,它是更早出现的可移动设备的杀毒系统,却被盗取了名字:)

kaiOS分层:
Gaia(前端):行在Firefox OS 平台的一个复杂的web应用集合,它是由HTML+CSS+JAVAScript组成,它于Cecko层的通讯只能通过web API进行
Gecko(中间层,一个Firefox的渲染或者说是排版引擎,提供了一个丰富的程序界面以供因特网相关的应用程序使用，例如网页浏览器、HTML编辑器、客户端/服务器等等。):它提供运行环境,如:app managerment, OS Management
Gonk(或Gonk-misc)(一个底层操作系统,名叫Gonk):包含kernel(基于安卓AOSP), RIL(用户空间硬件抽象层), HW Drivers(硬件驱动)。Gonk 是一个设备接口层，可看作是 硬件和 Gecko 之间的适配器。

kaiOS的app本质就是web网页,可以是本地的网页压缩包或者是服务器网页.
kaiOS的系统源码,网络上没找到任何有价值的文档,不过我们可以通过它的前身Firefox os(也可以是说是B2G OS)来了解它的Caia和Gecko层,Gonk可以参考安卓

kaiOS的启动:
和安卓一样,通过init.c读取init.rc的命令,来调起环境的服务们,但不同的是,这次调起的不是zygote受精卵,也不是Firefox OS的b2g.rc(印度人的小聪明:),或者是Firefox较早版本),在init.rc的最后看到"service servicemanager /system/bin/servicemanager",应该就是它了.
不管怎么改,init后是启动的"SystemServer.java"这点应该是不会变的,不然那个修改量不可想象,而且它用安卓的AOSP就没意义了.
通过lunch XXX,我们可以看到"PLATFORM_VERSION=6.0.1",即使用的是安卓6.0.1的版本.和6.0.1的安卓源码对比,很容易看到修改内容.(好像没有啥改动,唯一不同RegionalizationEnvironment好像也是安卓自己的小版本差异)

从编译入手分析源码断了.没事,从这几个分层入手,github走一圈Gaia,Gecko,Gonk.会发现他们都是mozilla的项目.
https://developer.mozilla.org/zh-CN/docs/Archive/B2G_OS
https://developer.mozilla.org/en-US/docs/Archive/B2G_OS

使用react来创建kaios的web应用:
1/使用“npx create-react-app 项目名” 来建立项目
2/下载 git clone https://github.com/kaiostech/sample-react.git,并将public(非必要,但manifest.webapp必须要) 和 src文件夹下内容复制过来
3/执行 "npm run build"
4/使用kaios的IDE工具"kaiosrt",来打开该项目生成的build文件夹
5/将build下的 manifest.webapp
6/将 manifest.webapp 中的 launch_path路径指向/build/index.html,将 icons修改为 build/XXX.png .但是这样的方式会使webIDE安装看起来十分缓慢

源码中添加web app项目:
1/将项目文件夹放到 apps 或 gaia/apps 下
2/在  gaia\build\config\phone\apps-production.list中添加项目名 (但是这样会导致 file not found)

如何看navigator.mozSettings的设置项:
adb pull /system/b2g/defaults/settings.json

蓝牙名称:
最终的蓝牙名称是由navigator.mozBluetooth提供,不是在上层定义的，navigator.mozBluetooth只是读取值的一个接口，这个默认名字是在BSP里面定义的，需要MTK支持

系统按键处理：
system/js/hardware_button.js

activity处理：
system/js/activity_window.js
system/js/activity_window_manager.js

新增或删除铃声:
路径在  gaia/shared/resources/media/notifications/目录中，并且在该目录的list.json中 新增或删除 相关配置，请参照已有格式。

更改默认的铃声:
在gaia\build\settings.js 文件里,
function setNotification(settings, config) {
  // Grab notifier_firefox.opus and convert it into a base64 string
  let notification_name = 'notifier_que_paso.ogg';
  let notification_l10nID = 'notifier_que_paso';
  setTone(settings, config, 'alerttone', notification_name,
          notification_l10nID);
}

修改硬件时间:
驱动修改设备节点文件 /dev/rtc0

修改sim卡的网络类型:
settings/js/supported_network_type_helper.js,这个文件是针对当前底层报上来的支持网络进行过滤处理,最后结果呈现到settings\js\carrier.js::cs_updateNetworkTypeSelector进行处理显示

获得当前是否插入耳机:
navigator.mozAudioChannelManager.headphones
注册耳机变化的监听(需要自己实现该接口内容):
navigator.mozAudioChannelManager.onheadphoneschange

window.addEventListener	//窗口事件监听,kaios可以监听所有按键的'keydown','keyup',和窗口的'load'等事件	

navigator.mozTelephony	//返回该设备是否是手机
navigator.mozAudioChannelManager.headphones   //是检测是否有耳机的插入状态的
navigator.mozAudioChannelManager.onheadphoneschange   //是耳机变化监听

通话界面代码: callscreen 应用
通话过程中界面底部的按键: apps\callscreen\js\call_screen_menu.js

launcher应用中,跳转去摄像机:
LaunchStore.launch('manifestURL', 'app://camera.gaiamobile.org/manifest.webapp');

launcher应用中,跳转去联系人:
LaunchStore.launch('manifestURL', 'app://communications.gaiamobile.org/manifest.webapp');

launcher应用中,修改长按5键的功能:
由于 快速拨号SpeedDialHelper默认启用,要修改两个地方,main_view.js中_longPressTimer里要增加5的处理,同时在 speed_dial_helper.js 中注释掉case 5:

设置震动:
navigator.vibrate(n*500)

蓝牙地址:
navigator.mozBluetooth.defaultAdapter.address

缺少开发者模式:
输入 ＊＃＊＃33284＃＊＃＊

浏览器调试模式中代码只有一行:
点击行号下面的{},进行格式化

被混淆的代码:
如果有vendor文件夹下的js文件,有eval,那多半就是混淆的地方了,直接去掉eval就好

webIDE工具的使用:
0/下载v57的老firefox浏览器
1/在firefox地址处输入about:config,进入配置
2/搜索"devtools.webide.enabled",设置为true
3/''web开发者'->webIDE
4/连接的手机输入:
adb root
adb forward tcp:6000 localfilesystem:/data/local/debugger-socket

编辑工具:
虽然所有文本编辑器都可以,但推荐VS code,因为它里面提供有KAIOS插件

离线全编(发现编译的大部分时间都是在网络验证):
source build/ensetup.sh
lunch XXX
OFFLINE=1 make -j8

调试单个app:
用kaios提供的工具,直接运行,但是当app具有:embed-apps(嵌入式应用),engineering-mode(工程模式),embed-widgets(嵌入式小部件)权限时,无法直接安装运行.只能通过后面总方式

单编app：//这里以system为例
    在gaia目录下,执行命令：make APP=system
将app刷入手机：
    adb root  
    adb remount  
    adb push gaia\profile\webapps\system.gaiamobile.org\application.zip system/b2g/webapps/system.gaiamobile.org 
    adb reboot

settings:
adb push \\192.168.1.245\panjunlong\E23-kai\QC8905_KAI2.5\LINUX\android\gaia\profile\webapps\settings.gaiamobile.org\application.zip system/b2g/webapps/settings.gaiamobile.org 

network-alerts:
adb push Z:\32A\MSM8905.LF.1.4_BB\LINUX\android\gaia\profile\webapps\network-alerts.gaiamobile.org\application.zip system/b2g/webapps/network-alerts.gaiamobile.org

system:
adb push Z:\32A\MSM8905.LF.1.4_BB\LINUX\android\gaia\profile\webapps\system.gaiamobile.org\application.zip system/b2g/webapps/system.gaiamobile.org

launcher:
adb push  \\192.168.1.245\panjunlong\E23-kai\QC8905_KAI2.5\LINUX\android\gaia\profile\webapps\launcher.gaiamobile.org\application.zip system/b2g/webapps/launcher.gaiamobile.org

adb push \\192.168.1.245\panjunlong\E23-kai\QC8905_KAI2.5\LINUX\android\gaia\profile\webapps\keyboard.gaiamobile.org\application.zip system/b2g/webapps/keyboard.gaiamobile.org